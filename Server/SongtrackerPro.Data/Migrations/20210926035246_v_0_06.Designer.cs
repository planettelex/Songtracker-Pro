// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SongtrackerPro.Data;

namespace SongtrackerPro.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210926035246_v_0_06")]
    partial class v_0_06
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.3")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SongtrackerPro.Data.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("city");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int")
                        .HasColumnName("country_id");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("postal_code");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)")
                        .HasColumnName("region");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("street");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("addresses");
                });

            modelBuilder.Entity("SongtrackerPro.Data.Models.Artist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AddressId")
                        .HasColumnType("int")
                        .HasColumnName("address_id");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("email");

                    b.Property<bool>("HasServiceMark")
                        .HasColumnType("bit")
                        .HasColumnName("has_service_mark");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.Property<string>("PressKitUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("press_kit_url");

                    b.Property<int?>("RecordLabelId")
                        .HasColumnType("int")
                        .HasColumnName("record_label_id");

                    b.Property<string>("TaxId")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("tax_id");

                    b.Property<string>("WebsiteUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("website_url");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("RecordLabelId");

                    b.ToTable("artists");
                });

            modelBuilder.Entity("SongtrackerPro.Data.Models.ArtistAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ArtistId")
                        .HasColumnType("int")
                        .HasColumnName("artist_id");

                    b.Property<bool>("IsPreferred")
                        .HasColumnType("bit")
                        .HasColumnName("is_preferred");

                    b.Property<int>("PlatformId")
                        .HasColumnType("int")
                        .HasColumnName("platform_id");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.HasIndex("ArtistId");

                    b.HasIndex("PlatformId");

                    b.ToTable("artist_accounts");
                });

            modelBuilder.Entity("SongtrackerPro.Data.Models.ArtistLink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ArtistId")
                        .HasColumnType("int")
                        .HasColumnName("artist_id");

                    b.Property<int>("PlatformId")
                        .HasColumnType("int")
                        .HasColumnName("platform_id");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("url");

                    b.HasKey("Id");

                    b.HasIndex("ArtistId");

                    b.HasIndex("PlatformId");

                    b.ToTable("artist_links");
                });

            modelBuilder.Entity("SongtrackerPro.Data.Models.ArtistManager", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ArtistId")
                        .HasColumnType("int")
                        .HasColumnName("artist_id");

                    b.Property<DateTime?>("EndedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("ended_on");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<int>("PersonId")
                        .HasColumnType("int")
                        .HasColumnName("person_id");

                    b.Property<DateTime>("StartedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("started_on");

                    b.HasKey("Id");

                    b.HasIndex("ArtistId");

                    b.HasIndex("PersonId");

                    b.ToTable("artist_managers");
                });

            modelBuilder.Entity("SongtrackerPro.Data.Models.ArtistMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ArtistId")
                        .HasColumnType("int")
                        .HasColumnName("artist_id");

                    b.Property<DateTime?>("EndedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("ended_on");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<int>("PersonId")
                        .HasColumnType("int")
                        .HasColumnName("person_id");

                    b.Property<DateTime>("StartedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("started_on");

                    b.HasKey("Id");

                    b.HasIndex("ArtistId");

                    b.HasIndex("PersonId");

                    b.ToTable("artist_members");
                });

            modelBuilder.Entity("SongtrackerPro.Data.Models.Composition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CatalogNumber")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("catalog_number");

                    b.Property<DateTime?>("CopyrightedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("copyrighted_on");

                    b.Property<string>("Iswc")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("iswc");

                    b.Property<int?>("LegalEntityId")
                        .HasColumnType("int")
                        .HasColumnName("legal_entity_id");

                    b.Property<int>("PublisherId")
                        .HasColumnType("int")
                        .HasColumnName("publisher_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.HasIndex("LegalEntityId");

                    b.HasIndex("PublisherId");

                    b.ToTable("compositions");
                });

            modelBuilder.Entity("SongtrackerPro.Data.Models.CompositionAuthor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompositionId")
                        .HasColumnType("int")
                        .HasColumnName("composition_id");

                    b.Property<decimal?>("OwnershipPercentage")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("ownership_percentage");

                    b.Property<int>("PersonId")
                        .HasColumnType("int")
                        .HasColumnName("person_id");

                    b.HasKey("Id");

                    b.HasIndex("CompositionId");

                    b.HasIndex("PersonId");

                    b.ToTable("composition_authors");
                });

            modelBuilder.Entity("SongtrackerPro.Data.Models.ContractParty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ArtistId")
                        .HasColumnType("int")
                        .HasColumnName("artist_id");

                    b.Property<Guid>("ContractId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("storage_item_id");

                    b.Property<bool>("IsPrincipal")
                        .HasColumnType("bit")
                        .HasColumnName("is_principal");

                    b.Property<int?>("LegalEntityId")
                        .HasColumnType("int")
                        .HasColumnName("legal_entity_id");

                    b.Property<int?>("PublisherId")
                        .HasColumnType("int")
                        .HasColumnName("publisher_id");

                    b.Property<int?>("RecordLabelId")
                        .HasColumnType("int")
                        .HasColumnName("record_label_id");

                    b.Property<int>("Role")
                        .HasColumnType("int")
                        .HasColumnName("role");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("ArtistId");

                    b.HasIndex("ContractId");

                    b.HasIndex("LegalEntityId");

                    b.HasIndex("PublisherId");

                    b.HasIndex("RecordLabelId");

                    b.HasIndex("UserId");

                    b.ToTable("contract_parties");
                });

            modelBuilder.Entity("SongtrackerPro.Data.Models.ContractSignatory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("ContractId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("storage_item_id");

                    b.Property<int?>("ContractPartyId")
                        .HasColumnType("int")
                        .HasColumnName("contract_party_id");

                    b.Property<int?>("PersonId")
                        .HasColumnType("int")
                        .HasColumnName("person_id");

                    b.Property<string>("SignatoryTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("signatory_title");

                    b.Property<DateTime?>("SignedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("signed_on");

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.HasIndex("ContractPartyId");

                    b.HasIndex("PersonId");

                    b.ToTable("contract_signatories");
                });

            modelBuilder.Entity("SongtrackerPro.Data.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("IsoCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)")
                        .HasColumnName("iso_code");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("countries");
                });

            modelBuilder.Entity("SongtrackerPro.Data.Models.DigitalMediaUpload", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("DigitalMediaId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("storage_item_id");

                    b.Property<int>("UploadedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("uploaded_by_user_id");

                    b.Property<DateTime>("UploadedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("uploaded_on");

                    b.HasKey("Id");

                    b.HasIndex("DigitalMediaId");

                    b.HasIndex("UploadedByUserId");

                    b.ToTable("digital_media_uploads");
                });

            modelBuilder.Entity("SongtrackerPro.Data.Models.DocumentUpload", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("DocumentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("storage_item_id");

                    b.Property<int?>("FromVersion")
                        .HasColumnType("int")
                        .HasColumnName("from_version");

                    b.Property<int>("ToVersion")
                        .HasColumnType("int")
                        .HasColumnName("to_version");

                    b.Property<int>("UploadedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("uploaded_by_user_id");

                    b.Property<DateTime>("UploadedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("uploaded_on");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.HasIndex("UploadedByUserId");

                    b.ToTable("document_uploads");
                });

            modelBuilder.Entity("SongtrackerPro.Data.Models.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.Property<int?>("ParentGenreId")
                        .HasColumnType("int")
                        .HasColumnName("parent_genre_id");

                    b.HasKey("Id");

                    b.HasIndex("ParentGenreId");

                    b.ToTable("genres");
                });

            modelBuilder.Entity("SongtrackerPro.Data.Models.Installation", b =>
                {
                    b.Property<Guid>("Uuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<string>("Tagline")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("tagline");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnName("version");

                    b.HasKey("Uuid");

                    b.ToTable("installation");
                });

            modelBuilder.Entity("SongtrackerPro.Data.Models.LegalEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AddressId")
                        .HasColumnType("int")
                        .HasColumnName("address_id");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.Property<string>("TaxId")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("tax_id");

                    b.Property<string>("TradeName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("trade_name");

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("legal_entities");
                });

            modelBuilder.Entity("SongtrackerPro.Data.Models.LegalEntityClient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("LegalEntityId")
                        .HasColumnType("int")
                        .HasColumnName("legal_entity_id");

                    b.Property<int>("PersonId")
                        .HasColumnType("int")
                        .HasColumnName("person_id");

                    b.HasKey("Id");

                    b.HasIndex("LegalEntityId");

                    b.HasIndex("PersonId");

                    b.ToTable("legal_entity_clients");
                });

            modelBuilder.Entity("SongtrackerPro.Data.Models.LegalEntityContact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("LegalEntityId")
                        .HasColumnType("int")
                        .HasColumnName("legal_entity_id");

                    b.Property<int>("PersonId")
                        .HasColumnType("int")
                        .HasColumnName("person_id");

                    b.Property<string>("Position")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("position");

                    b.HasKey("Id");

                    b.HasIndex("LegalEntityId");

                    b.HasIndex("PersonId");

                    b.ToTable("legal_entity_contacts");
                });

            modelBuilder.Entity("SongtrackerPro.Data.Models.LegalEntityService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("LegalEntityId")
                        .HasColumnType("int")
                        .HasColumnName("legal_entity_id");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int")
                        .HasColumnName("service_id");

                    b.HasKey("Id");

                    b.HasIndex("LegalEntityId");

                    b.HasIndex("ServiceId");

                    b.ToTable("legal_entity_services");
                });

            modelBuilder.Entity("SongtrackerPro.Data.Models.Login", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AuthenticationToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("authentication_token");

                    b.Property<DateTime>("LoginAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("login_at");

                    b.Property<DateTime?>("LogoutAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("logout_at");

                    b.Property<DateTime>("TokenExpiration")
                        .HasColumnType("datetime2")
                        .HasColumnName("token_expiration");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("logins");
                });

            modelBuilder.Entity("SongtrackerPro.Data.Models.MerchandiseCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.Property<int?>("ParentCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("parent_category_id");

                    b.HasKey("Id");

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("merchandise_categories");
                });

            modelBuilder.Entity("SongtrackerPro.Data.Models.MerchandiseItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ArtistId")
                        .HasColumnType("int")
                        .HasColumnName("artist_id");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPromotional")
                        .HasColumnType("bit")
                        .HasColumnName("is_promotional");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("ArtistId");

                    b.HasIndex("CategoryId");

                    b.ToTable("merchandise");

                    b.HasDiscriminator<string>("Discriminator").HasValue("MerchandiseItem");
                });

            modelBuilder.Entity("SongtrackerPro.Data.Models.MerchandiseProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("color");

                    b.Property<string>("ColorName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("color_name");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MerchandiseItemId")
                        .HasColumnType("int")
                        .HasColumnName("merchandise_item_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.Property<string>("Size")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("size");

                    b.Property<string>("Sku")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("sku");

                    b.Property<string>("Upc")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("upc");

                    b.HasKey("Id");

                    b.HasIndex("MerchandiseItemId");

                    b.ToTable("merchandise_products");

                    b.HasDiscriminator<string>("Discriminator").HasValue("MerchandiseProduct");
                });

            modelBuilder.Entity("SongtrackerPro.Data.Models.PerformingRightsOrganization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CountryId")
                        .HasColumnType("int")
                        .HasColumnName("country_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("performing_rights_organizations");
                });

            modelBuilder.Entity("SongtrackerPro.Data.Models.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AddressId")
                        .HasColumnType("int")
                        .HasColumnName("address_id");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("last_name");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("middle_name");

                    b.Property<string>("NameSuffix")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)")
                        .HasColumnName("name_suffix");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("phone");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("people");
                });

            modelBuilder.Entity("SongtrackerPro.Data.Models.Platform", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("website");

                    b.HasKey("Id");

                    b.ToTable("platforms");
                });

            modelBuilder.Entity("SongtrackerPro.Data.Models.PlatformService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PlatformId")
                        .HasColumnType("int")
                        .HasColumnName("platform_id");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int")
                        .HasColumnName("service_id");

                    b.HasKey("Id");

                    b.HasIndex("PlatformId");

                    b.HasIndex("ServiceId");

                    b.ToTable("platform_services");
                });

            modelBuilder.Entity("SongtrackerPro.Data.Models.Publication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CatalogNumber")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("catalog_number");

                    b.Property<DateTime?>("CopyrightedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("copyrighted_on");

                    b.Property<string>("Isbn")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("isbn");

                    b.Property<int>("PublisherId")
                        .HasColumnType("int")
                        .HasColumnName("publisher_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.HasIndex("PublisherId");

                    b.ToTable("publications");
                });

            modelBuilder.Entity("SongtrackerPro.Data.Models.PublicationAuthor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("OwnershipPercentage")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("ownership_percentage");

                    b.Property<int>("PersonId")
                        .HasColumnType("int")
                        .HasColumnName("person_id");

                    b.Property<int>("PublicationId")
                        .HasColumnType("int")
                        .HasColumnName("publication_id");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.HasIndex("PublicationId");

                    b.ToTable("publication_authors");
                });

            modelBuilder.Entity("SongtrackerPro.Data.Models.Publisher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AddressId")
                        .HasColumnType("int")
                        .HasColumnName("address_id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.Property<int?>("PerformingRightsOrganizationId")
                        .HasColumnType("int")
                        .HasColumnName("performing_rights_organization_id");

                    b.Property<string>("PerformingRightsOrganizationPublisherNumber")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("performing_rights_organization_publisher_number");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("phone");

                    b.Property<string>("TaxId")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("tax_id");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("PerformingRightsOrganizationId");

                    b.ToTable("publishers");
                });

            modelBuilder.Entity("SongtrackerPro.Data.Models.RecordLabel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AddressId")
                        .HasColumnType("int")
                        .HasColumnName("address_id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("phone");

                    b.Property<string>("TaxId")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("tax_id");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("record_labels");
                });

            modelBuilder.Entity("SongtrackerPro.Data.Models.Recording", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ArtistId")
                        .HasColumnType("int")
                        .HasColumnName("artist_id");

                    b.Property<int>("CompositionId")
                        .HasColumnType("int")
                        .HasColumnName("composition_id");

                    b.Property<int?>("GenreId")
                        .HasColumnType("int")
                        .HasColumnName("genre_id");

                    b.Property<bool>("IsCover")
                        .HasColumnType("bit")
                        .HasColumnName("is_cover");

                    b.Property<bool>("IsLive")
                        .HasColumnType("bit")
                        .HasColumnName("is_live");

                    b.Property<bool>("IsRemix")
                        .HasColumnType("bit")
                        .HasColumnName("is_remix");

                    b.Property<string>("Isrc")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("isrc");

                    b.Property<int?>("OriginalRecordingId")
                        .HasColumnType("int")
                        .HasColumnName("original_recording_id");

                    b.Property<int>("RecordLabelId")
                        .HasColumnType("int")
                        .HasColumnName("record_label_id");

                    b.Property<int>("SecondsLong")
                        .HasColumnType("int")
                        .HasColumnName("seconds_long");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.HasIndex("ArtistId");

                    b.HasIndex("CompositionId");

                    b.HasIndex("GenreId");

                    b.HasIndex("OriginalRecordingId");

                    b.HasIndex("RecordLabelId");

                    b.ToTable("recordings");
                });

            modelBuilder.Entity("SongtrackerPro.Data.Models.RecordingCredit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsFeatured")
                        .HasColumnType("bit")
                        .HasColumnName("is_featured");

                    b.Property<decimal?>("OwnershipPercentage")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("ownership_percentage");

                    b.Property<int>("PersonId")
                        .HasColumnType("int")
                        .HasColumnName("person_id");

                    b.Property<int>("RecordingId")
                        .HasColumnType("int")
                        .HasColumnName("recording_id");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.HasIndex("RecordingId");

                    b.ToTable("recording_credits");
                });

            modelBuilder.Entity("SongtrackerPro.Data.Models.RecordingCreditRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("RecordingCreditId")
                        .HasColumnType("int")
                        .HasColumnName("recording_credit_id");

                    b.Property<int>("RecordingRoleId")
                        .HasColumnType("int")
                        .HasColumnName("recording_role_id");

                    b.HasKey("Id");

                    b.HasIndex("RecordingCreditId");

                    b.HasIndex("RecordingRoleId");

                    b.ToTable("recording_credit_roles");
                });

            modelBuilder.Entity("SongtrackerPro.Data.Models.RecordingRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("recording_roles");
                });

            modelBuilder.Entity("SongtrackerPro.Data.Models.Release", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ArtistId")
                        .HasColumnType("int")
                        .HasColumnName("artist_id");

                    b.Property<string>("CatalogNumber")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("catalog_number");

                    b.Property<int?>("GenreId")
                        .HasColumnType("int")
                        .HasColumnName("genre_id");

                    b.Property<int>("RecordLabelId")
                        .HasColumnType("int")
                        .HasColumnName("record_label_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("title");

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.HasIndex("ArtistId");

                    b.HasIndex("GenreId");

                    b.HasIndex("RecordLabelId");

                    b.ToTable("releases");
                });

            modelBuilder.Entity("SongtrackerPro.Data.Models.ReleaseTrack", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("RecordingId")
                        .HasColumnType("int")
                        .HasColumnName("recording_id");

                    b.Property<int>("ReleaseId")
                        .HasColumnType("int")
                        .HasColumnName("release_id");

                    b.Property<int>("TrackNumber")
                        .HasColumnType("int")
                        .HasColumnName("track_number");

                    b.HasKey("Id");

                    b.HasIndex("RecordingId");

                    b.HasIndex("ReleaseId");

                    b.ToTable("release_tracks");
                });

            modelBuilder.Entity("SongtrackerPro.Data.Models.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.ToTable("services");
                });

            modelBuilder.Entity("SongtrackerPro.Data.Models.StorageItem", b =>
                {
                    b.Property<Guid>("Uuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("uuid");

                    b.Property<int?>("ArtistId")
                        .HasColumnType("int")
                        .HasColumnName("artist_id");

                    b.Property<string>("Container")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("container");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_on");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("file_name");

                    b.Property<string>("FolderPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("folder_path");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.Property<int?>("PublisherId")
                        .HasColumnType("int")
                        .HasColumnName("publisher_id");

                    b.Property<int?>("RecordLabelId")
                        .HasColumnType("int")
                        .HasColumnName("record_label_id");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_on");

                    b.HasKey("Uuid");

                    b.HasIndex("ArtistId");

                    b.HasIndex("PublisherId");

                    b.HasIndex("RecordLabelId");

                    b.ToTable("storage_items");

                    b.HasDiscriminator<string>("Discriminator").HasValue("StorageItem");
                });

            modelBuilder.Entity("SongtrackerPro.Data.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AuthenticationId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("authentication_id");

                    b.Property<int?>("PerformingRightsOrganizationId")
                        .HasColumnType("int")
                        .HasColumnName("performing_rights_organization_id");

                    b.Property<string>("PerformingRightsOrganizationMemberNumber")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("performing_rights_organization_member_number");

                    b.Property<int?>("PersonId")
                        .HasColumnType("int")
                        .HasColumnName("person_id");

                    b.Property<int?>("PublisherId")
                        .HasColumnType("int")
                        .HasColumnName("publisher_id");

                    b.Property<int?>("RecordLabelId")
                        .HasColumnType("int")
                        .HasColumnName("record_label_id");

                    b.Property<int>("Roles")
                        .HasColumnType("int")
                        .HasColumnName("roles");

                    b.Property<string>("SocialSecurityNumber")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("social_security_number");

                    b.Property<string>("SoundExchangeAccountNumber")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("sound_exchange_account_number");

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.HasIndex("PerformingRightsOrganizationId");

                    b.HasIndex("PersonId");

                    b.HasIndex("PublisherId");

                    b.HasIndex("RecordLabelId");

                    b.ToTable("users");
                });

            modelBuilder.Entity("SongtrackerPro.Data.Models.UserAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsPreferred")
                        .HasColumnType("bit")
                        .HasColumnName("is_preferred");

                    b.Property<int>("PlatformId")
                        .HasColumnType("int")
                        .HasColumnName("platform_id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.HasIndex("PlatformId");

                    b.HasIndex("UserId");

                    b.ToTable("user_accounts");
                });

            modelBuilder.Entity("SongtrackerPro.Data.Models.UserInvitation", b =>
                {
                    b.Property<Guid>("Uuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("uuid");

                    b.Property<DateTime?>("AcceptedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("accepted_on");

                    b.Property<int?>("ArtistId")
                        .HasColumnType("int")
                        .HasColumnName("artist_id");

                    b.Property<int?>("CreatedUserId")
                        .HasColumnType("int")
                        .HasColumnName("created_user_id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("email");

                    b.Property<int>("InvitedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("invited_by_user_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.Property<int?>("PublisherId")
                        .HasColumnType("int")
                        .HasColumnName("publisher_id");

                    b.Property<int?>("RecordLabelId")
                        .HasColumnType("int")
                        .HasColumnName("record_label_id");

                    b.Property<int>("Roles")
                        .HasColumnType("int")
                        .HasColumnName("roles");

                    b.Property<DateTime>("SentOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("sent_on");

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasColumnName("type");

                    b.HasKey("Uuid");

                    b.HasIndex("ArtistId");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("InvitedByUserId");

                    b.HasIndex("PublisherId");

                    b.HasIndex("RecordLabelId");

                    b.ToTable("user_invitations");
                });

            modelBuilder.Entity("SongtrackerPro.Data.Models.PublisherMerchandiseItem", b =>
                {
                    b.HasBaseType("SongtrackerPro.Data.Models.MerchandiseItem");

                    b.Property<int?>("PublisherId")
                        .HasColumnType("int")
                        .HasColumnName("publisher_id");

                    b.HasIndex("PublisherId");

                    b.ToTable("merchandise");

                    b.HasDiscriminator().HasValue("PublisherMerchandiseItem");
                });

            modelBuilder.Entity("SongtrackerPro.Data.Models.RecordLabelMerchandiseItem", b =>
                {
                    b.HasBaseType("SongtrackerPro.Data.Models.MerchandiseItem");

                    b.Property<int?>("RecordLabelId")
                        .HasColumnType("int")
                        .HasColumnName("record_label_id");

                    b.HasIndex("RecordLabelId");

                    b.ToTable("merchandise");

                    b.HasDiscriminator().HasValue("RecordLabelMerchandiseItem");
                });

            modelBuilder.Entity("SongtrackerPro.Data.Models.PublicationMerchandiseProduct", b =>
                {
                    b.HasBaseType("SongtrackerPro.Data.Models.MerchandiseProduct");

                    b.Property<string>("IssueNumber")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("issue_number");

                    b.ToTable("merchandise_products");

                    b.HasDiscriminator().HasValue("PublicationMerchandiseProduct");
                });

            modelBuilder.Entity("SongtrackerPro.Data.Models.ReleaseMerchandiseProduct", b =>
                {
                    b.HasBaseType("SongtrackerPro.Data.Models.MerchandiseProduct");

                    b.Property<int?>("ReleaseId")
                        .HasColumnType("int")
                        .HasColumnName("release_id");

                    b.Property<int?>("Type")
                        .HasColumnType("int")
                        .HasColumnName("media_type");

                    b.HasIndex("ReleaseId");

                    b.ToTable("merchandise_products");

                    b.HasDiscriminator().HasValue("ReleaseMerchandiseProduct");
                });

            modelBuilder.Entity("SongtrackerPro.Data.Models.DigitalMedia", b =>
                {
                    b.HasBaseType("SongtrackerPro.Data.Models.StorageItem");

                    b.Property<bool?>("IsCompressed")
                        .HasColumnType("bit")
                        .HasColumnName("is_compressed");

                    b.Property<int?>("MediaCategory")
                        .HasColumnType("int")
                        .HasColumnName("media_category");

                    b.ToTable("storage_items");

                    b.HasDiscriminator().HasValue("DigitalMedia");
                });

            modelBuilder.Entity("SongtrackerPro.Data.Models.Document", b =>
                {
                    b.HasBaseType("SongtrackerPro.Data.Models.StorageItem");

                    b.Property<int?>("DocumentType")
                        .HasColumnType("int")
                        .HasColumnName("document_type");

                    b.Property<int?>("Version")
                        .HasColumnType("int")
                        .HasColumnName("version");

                    b.ToTable("storage_items");

                    b.HasDiscriminator().HasValue("Document");
                });

            modelBuilder.Entity("SongtrackerPro.Data.Models.MerchandiseAsset", b =>
                {
                    b.HasBaseType("SongtrackerPro.Data.Models.StorageItem");

                    b.Property<int?>("MerchandiseItemId")
                        .HasColumnType("int")
                        .HasColumnName("merchandise_item_id");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.HasIndex("MerchandiseItemId");

                    b.HasIndex("ProductId");

                    b.ToTable("storage_items");

                    b.HasDiscriminator().HasValue("MerchandiseAsset");
                });

            modelBuilder.Entity("SongtrackerPro.Data.Models.Contract", b =>
                {
                    b.HasBaseType("SongtrackerPro.Data.Models.Document");

                    b.Property<int?>("ContractStatus")
                        .HasColumnType("int")
                        .HasColumnName("contract_status");

                    b.Property<DateTime?>("DraftedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("drafted_on");

                    b.Property<DateTime?>("ExecutedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("executed_on");

                    b.Property<DateTime?>("ExpiredOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("expired_on");

                    b.Property<bool?>("IsTemplate")
                        .HasColumnType("bit")
                        .HasColumnName("is_template");

                    b.Property<int?>("PromiseePartyType")
                        .HasColumnType("int")
                        .HasColumnName("promisee_party_type");

                    b.Property<int?>("PromisorPartyType")
                        .HasColumnType("int")
                        .HasColumnName("promisor_party_type");

                    b.Property<DateTime?>("ProposedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("proposed_on");

                    b.Property<int?>("ProvidedById")
                        .HasColumnType("int")
                        .HasColumnName("provided_by_id");

                    b.Property<DateTime?>("ProvidedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("provided_on");

                    b.Property<DateTime?>("RejectedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("rejected_on");

                    b.Property<Guid?>("TemplateId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("template_id");

                    b.HasIndex("ProvidedById");

                    b.HasIndex("TemplateId");

                    b.ToTable("storage_items");

                    b.HasDiscriminator().HasValue("Contract");
                });

            modelBuilder.Entity("SongtrackerPro.Data.Models.PublisherContract", b =>
                {
                    b.HasBaseType("SongtrackerPro.Data.Models.Contract");

                    b.Property<int?>("CompositionId")
                        .HasColumnType("int")
                        .HasColumnName("composition_id");

                    b.Property<int?>("PublicationId")
                        .HasColumnType("int")
                        .HasColumnName("publication_id");

                    b.HasIndex("CompositionId");

                    b.HasIndex("PublicationId");

                    b.ToTable("storage_items");

                    b.HasDiscriminator().HasValue("PublisherContract");
                });

            modelBuilder.Entity("SongtrackerPro.Data.Models.RecordLabelContract", b =>
                {
                    b.HasBaseType("SongtrackerPro.Data.Models.Contract");

                    b.Property<int?>("RecordingId")
                        .HasColumnType("int")
                        .HasColumnName("recording_id");

                    b.Property<int?>("ReleaseId")
                        .HasColumnType("int")
                        .HasColumnName("release_id");

                    b.HasIndex("RecordingId");

                    b.HasIndex("ReleaseId");

                    b.ToTable("storage_items");

                    b.HasDiscriminator().HasValue("RecordLabelContract");
                });

            modelBuilder.Entity("SongtrackerPro.Data.Models.Address", b =>
                {
                    b.HasOne("SongtrackerPro.Data.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("SongtrackerPro.Data.Models.Artist", b =>
                {
                    b.HasOne("SongtrackerPro.Data.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("SongtrackerPro.Data.Models.RecordLabel", "RecordLabel")
                        .WithMany()
                        .HasForeignKey("RecordLabelId");

                    b.Navigation("Address");

                    b.Navigation("RecordLabel");
                });

            modelBuilder.Entity("SongtrackerPro.Data.Models.ArtistAccount", b =>
                {
                    b.HasOne("SongtrackerPro.Data.Models.Artist", "Artist")
                        .WithMany()
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SongtrackerPro.Data.Models.Platform", "Platform")
                        .WithMany()
                        .HasForeignKey("PlatformId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artist");

                    b.Navigation("Platform");
                });

            modelBuilder.Entity("SongtrackerPro.Data.Models.ArtistLink", b =>
                {
                    b.HasOne("SongtrackerPro.Data.Models.Artist", "Artist")
                        .WithMany()
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SongtrackerPro.Data.Models.Platform", "Platform")
                        .WithMany()
                        .HasForeignKey("PlatformId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artist");

                    b.Navigation("Platform");
                });

            modelBuilder.Entity("SongtrackerPro.Data.Models.ArtistManager", b =>
                {
                    b.HasOne("SongtrackerPro.Data.Models.Artist", "Artist")
                        .WithMany()
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SongtrackerPro.Data.Models.Person", "Manager")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artist");

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("SongtrackerPro.Data.Models.ArtistMember", b =>
                {
                    b.HasOne("SongtrackerPro.Data.Models.Artist", "Artist")
                        .WithMany()
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SongtrackerPro.Data.Models.Person", "Member")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artist");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("SongtrackerPro.Data.Models.Composition", b =>
                {
                    b.HasOne("SongtrackerPro.Data.Models.LegalEntity", "ExternalPublisher")
                        .WithMany()
                        .HasForeignKey("LegalEntityId");

                    b.HasOne("SongtrackerPro.Data.Models.Publisher", "Publisher")
                        .WithMany()
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExternalPublisher");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("SongtrackerPro.Data.Models.CompositionAuthor", b =>
                {
                    b.HasOne("SongtrackerPro.Data.Models.Composition", "Composition")
                        .WithMany()
                        .HasForeignKey("CompositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SongtrackerPro.Data.Models.Person", "Author")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Composition");
                });

            modelBuilder.Entity("SongtrackerPro.Data.Models.ContractParty", b =>
                {
                    b.HasOne("SongtrackerPro.Data.Models.Artist", "Artist")
                        .WithMany()
                        .HasForeignKey("ArtistId");

                    b.HasOne("SongtrackerPro.Data.Models.Contract", "Contract")
                        .WithMany()
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SongtrackerPro.Data.Models.LegalEntity", "LegalEntity")
                        .WithMany()
                        .HasForeignKey("LegalEntityId");

                    b.HasOne("SongtrackerPro.Data.Models.Publisher", "Publisher")
                        .WithMany()
                        .HasForeignKey("PublisherId");

                    b.HasOne("SongtrackerPro.Data.Models.RecordLabel", "RecordLabel")
                        .WithMany()
                        .HasForeignKey("RecordLabelId");

                    b.HasOne("SongtrackerPro.Data.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Artist");

                    b.Navigation("Contract");

                    b.Navigation("LegalEntity");

                    b.Navigation("Publisher");

                    b.Navigation("RecordLabel");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SongtrackerPro.Data.Models.ContractSignatory", b =>
                {
                    b.HasOne("SongtrackerPro.Data.Models.Contract", "Contract")
                        .WithMany()
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SongtrackerPro.Data.Models.ContractParty", "SignatoryFor")
                        .WithMany()
                        .HasForeignKey("ContractPartyId");

                    b.HasOne("SongtrackerPro.Data.Models.Person", "Signatory")
                        .WithMany()
                        .HasForeignKey("PersonId");

                    b.Navigation("Contract");

                    b.Navigation("Signatory");

                    b.Navigation("SignatoryFor");
                });

            modelBuilder.Entity("SongtrackerPro.Data.Models.DigitalMediaUpload", b =>
                {
                    b.HasOne("SongtrackerPro.Data.Models.DigitalMedia", "DigitalMedia")
                        .WithMany()
                        .HasForeignKey("DigitalMediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SongtrackerPro.Data.Models.User", "UploadedByUser")
                        .WithMany()
                        .HasForeignKey("UploadedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DigitalMedia");

                    b.Navigation("UploadedByUser");
                });

            modelBuilder.Entity("SongtrackerPro.Data.Models.DocumentUpload", b =>
                {
                    b.HasOne("SongtrackerPro.Data.Models.Document", "Document")
                        .WithMany()
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SongtrackerPro.Data.Models.User", "UploadedByUser")
                        .WithMany()
                        .HasForeignKey("UploadedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Document");

                    b.Navigation("UploadedByUser");
                });

            modelBuilder.Entity("SongtrackerPro.Data.Models.Genre", b =>
                {
                    b.HasOne("SongtrackerPro.Data.Models.Genre", "ParentGenre")
                        .WithMany()
                        .HasForeignKey("ParentGenreId");

                    b.Navigation("ParentGenre");
                });

            modelBuilder.Entity("SongtrackerPro.Data.Models.LegalEntity", b =>
                {
                    b.HasOne("SongtrackerPro.Data.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.Navigation("Address");
                });

            modelBuilder.Entity("SongtrackerPro.Data.Models.LegalEntityClient", b =>
                {
                    b.HasOne("SongtrackerPro.Data.Models.LegalEntity", "LegalEntity")
                        .WithMany()
                        .HasForeignKey("LegalEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SongtrackerPro.Data.Models.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LegalEntity");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("SongtrackerPro.Data.Models.LegalEntityContact", b =>
                {
                    b.HasOne("SongtrackerPro.Data.Models.LegalEntity", "LegalEntity")
                        .WithMany()
                        .HasForeignKey("LegalEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SongtrackerPro.Data.Models.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LegalEntity");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("SongtrackerPro.Data.Models.LegalEntityService", b =>
                {
                    b.HasOne("SongtrackerPro.Data.Models.LegalEntity", "LegalEntity")
                        .WithMany("LegalEntityServices")
                        .HasForeignKey("LegalEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SongtrackerPro.Data.Models.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LegalEntity");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("SongtrackerPro.Data.Models.Login", b =>
                {
                    b.HasOne("SongtrackerPro.Data.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SongtrackerPro.Data.Models.MerchandiseCategory", b =>
                {
                    b.HasOne("SongtrackerPro.Data.Models.MerchandiseCategory", "ParentCategory")
                        .WithMany()
                        .HasForeignKey("ParentCategoryId");

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("SongtrackerPro.Data.Models.MerchandiseItem", b =>
                {
                    b.HasOne("SongtrackerPro.Data.Models.Artist", "Artist")
                        .WithMany()
                        .HasForeignKey("ArtistId");

                    b.HasOne("SongtrackerPro.Data.Models.MerchandiseCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId");

                    b.Navigation("Artist");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("SongtrackerPro.Data.Models.MerchandiseProduct", b =>
                {
                    b.HasOne("SongtrackerPro.Data.Models.MerchandiseItem", "MerchandiseItem")
                        .WithMany()
                        .HasForeignKey("MerchandiseItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MerchandiseItem");
                });

            modelBuilder.Entity("SongtrackerPro.Data.Models.PerformingRightsOrganization", b =>
                {
                    b.HasOne("SongtrackerPro.Data.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("SongtrackerPro.Data.Models.Person", b =>
                {
                    b.HasOne("SongtrackerPro.Data.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.Navigation("Address");
                });

            modelBuilder.Entity("SongtrackerPro.Data.Models.PlatformService", b =>
                {
                    b.HasOne("SongtrackerPro.Data.Models.Platform", "Platform")
                        .WithMany("PlatformServices")
                        .HasForeignKey("PlatformId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SongtrackerPro.Data.Models.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Platform");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("SongtrackerPro.Data.Models.Publication", b =>
                {
                    b.HasOne("SongtrackerPro.Data.Models.Publisher", "Publisher")
                        .WithMany()
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("SongtrackerPro.Data.Models.PublicationAuthor", b =>
                {
                    b.HasOne("SongtrackerPro.Data.Models.Person", "Author")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SongtrackerPro.Data.Models.Publication", "Publication")
                        .WithMany()
                        .HasForeignKey("PublicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Publication");
                });

            modelBuilder.Entity("SongtrackerPro.Data.Models.Publisher", b =>
                {
                    b.HasOne("SongtrackerPro.Data.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("SongtrackerPro.Data.Models.PerformingRightsOrganization", "PerformingRightsOrganization")
                        .WithMany()
                        .HasForeignKey("PerformingRightsOrganizationId");

                    b.Navigation("Address");

                    b.Navigation("PerformingRightsOrganization");
                });

            modelBuilder.Entity("SongtrackerPro.Data.Models.RecordLabel", b =>
                {
                    b.HasOne("SongtrackerPro.Data.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.Navigation("Address");
                });

            modelBuilder.Entity("SongtrackerPro.Data.Models.Recording", b =>
                {
                    b.HasOne("SongtrackerPro.Data.Models.Artist", "Artist")
                        .WithMany()
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SongtrackerPro.Data.Models.Composition", "Composition")
                        .WithMany()
                        .HasForeignKey("CompositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SongtrackerPro.Data.Models.Genre", "Genre")
                        .WithMany()
                        .HasForeignKey("GenreId");

                    b.HasOne("SongtrackerPro.Data.Models.Recording", "OriginalRecording")
                        .WithMany()
                        .HasForeignKey("OriginalRecordingId");

                    b.HasOne("SongtrackerPro.Data.Models.RecordLabel", "RecordLabel")
                        .WithMany()
                        .HasForeignKey("RecordLabelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artist");

                    b.Navigation("Composition");

                    b.Navigation("Genre");

                    b.Navigation("OriginalRecording");

                    b.Navigation("RecordLabel");
                });

            modelBuilder.Entity("SongtrackerPro.Data.Models.RecordingCredit", b =>
                {
                    b.HasOne("SongtrackerPro.Data.Models.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SongtrackerPro.Data.Models.Recording", "Recording")
                        .WithMany()
                        .HasForeignKey("RecordingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("Recording");
                });

            modelBuilder.Entity("SongtrackerPro.Data.Models.RecordingCreditRole", b =>
                {
                    b.HasOne("SongtrackerPro.Data.Models.RecordingCredit", "RecordingCredit")
                        .WithMany("RecordingCreditRoles")
                        .HasForeignKey("RecordingCreditId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SongtrackerPro.Data.Models.RecordingRole", "RecordingRole")
                        .WithMany()
                        .HasForeignKey("RecordingRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RecordingCredit");

                    b.Navigation("RecordingRole");
                });

            modelBuilder.Entity("SongtrackerPro.Data.Models.Release", b =>
                {
                    b.HasOne("SongtrackerPro.Data.Models.Artist", "Artist")
                        .WithMany()
                        .HasForeignKey("ArtistId");

                    b.HasOne("SongtrackerPro.Data.Models.Genre", "Genre")
                        .WithMany()
                        .HasForeignKey("GenreId");

                    b.HasOne("SongtrackerPro.Data.Models.RecordLabel", "RecordLabel")
                        .WithMany()
                        .HasForeignKey("RecordLabelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artist");

                    b.Navigation("Genre");

                    b.Navigation("RecordLabel");
                });

            modelBuilder.Entity("SongtrackerPro.Data.Models.ReleaseTrack", b =>
                {
                    b.HasOne("SongtrackerPro.Data.Models.Recording", "Recording")
                        .WithMany()
                        .HasForeignKey("RecordingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SongtrackerPro.Data.Models.Release", "Release")
                        .WithMany()
                        .HasForeignKey("ReleaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Recording");

                    b.Navigation("Release");
                });

            modelBuilder.Entity("SongtrackerPro.Data.Models.StorageItem", b =>
                {
                    b.HasOne("SongtrackerPro.Data.Models.Artist", "Artist")
                        .WithMany()
                        .HasForeignKey("ArtistId");

                    b.HasOne("SongtrackerPro.Data.Models.Publisher", "Publisher")
                        .WithMany()
                        .HasForeignKey("PublisherId");

                    b.HasOne("SongtrackerPro.Data.Models.RecordLabel", "RecordLabel")
                        .WithMany()
                        .HasForeignKey("RecordLabelId");

                    b.Navigation("Artist");

                    b.Navigation("Publisher");

                    b.Navigation("RecordLabel");
                });

            modelBuilder.Entity("SongtrackerPro.Data.Models.User", b =>
                {
                    b.HasOne("SongtrackerPro.Data.Models.PerformingRightsOrganization", "PerformingRightsOrganization")
                        .WithMany()
                        .HasForeignKey("PerformingRightsOrganizationId");

                    b.HasOne("SongtrackerPro.Data.Models.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId");

                    b.HasOne("SongtrackerPro.Data.Models.Publisher", "Publisher")
                        .WithMany()
                        .HasForeignKey("PublisherId");

                    b.HasOne("SongtrackerPro.Data.Models.RecordLabel", "RecordLabel")
                        .WithMany()
                        .HasForeignKey("RecordLabelId");

                    b.Navigation("PerformingRightsOrganization");

                    b.Navigation("Person");

                    b.Navigation("Publisher");

                    b.Navigation("RecordLabel");
                });

            modelBuilder.Entity("SongtrackerPro.Data.Models.UserAccount", b =>
                {
                    b.HasOne("SongtrackerPro.Data.Models.Platform", "Platform")
                        .WithMany()
                        .HasForeignKey("PlatformId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SongtrackerPro.Data.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Platform");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SongtrackerPro.Data.Models.UserInvitation", b =>
                {
                    b.HasOne("SongtrackerPro.Data.Models.Artist", "Artist")
                        .WithMany()
                        .HasForeignKey("ArtistId");

                    b.HasOne("SongtrackerPro.Data.Models.User", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("SongtrackerPro.Data.Models.User", "InvitedByUser")
                        .WithMany()
                        .HasForeignKey("InvitedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SongtrackerPro.Data.Models.Publisher", "Publisher")
                        .WithMany()
                        .HasForeignKey("PublisherId");

                    b.HasOne("SongtrackerPro.Data.Models.RecordLabel", "RecordLabel")
                        .WithMany()
                        .HasForeignKey("RecordLabelId");

                    b.Navigation("Artist");

                    b.Navigation("CreatedUser");

                    b.Navigation("InvitedByUser");

                    b.Navigation("Publisher");

                    b.Navigation("RecordLabel");
                });

            modelBuilder.Entity("SongtrackerPro.Data.Models.PublisherMerchandiseItem", b =>
                {
                    b.HasOne("SongtrackerPro.Data.Models.Publisher", "Publisher")
                        .WithMany()
                        .HasForeignKey("PublisherId");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("SongtrackerPro.Data.Models.RecordLabelMerchandiseItem", b =>
                {
                    b.HasOne("SongtrackerPro.Data.Models.RecordLabel", "RecordLabel")
                        .WithMany()
                        .HasForeignKey("RecordLabelId");

                    b.Navigation("RecordLabel");
                });

            modelBuilder.Entity("SongtrackerPro.Data.Models.ReleaseMerchandiseProduct", b =>
                {
                    b.HasOne("SongtrackerPro.Data.Models.Release", "Release")
                        .WithMany()
                        .HasForeignKey("ReleaseId");

                    b.Navigation("Release");
                });

            modelBuilder.Entity("SongtrackerPro.Data.Models.MerchandiseAsset", b =>
                {
                    b.HasOne("SongtrackerPro.Data.Models.MerchandiseItem", "MerchandiseItem")
                        .WithMany()
                        .HasForeignKey("MerchandiseItemId");

                    b.HasOne("SongtrackerPro.Data.Models.MerchandiseProduct", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.Navigation("MerchandiseItem");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SongtrackerPro.Data.Models.Contract", b =>
                {
                    b.HasOne("SongtrackerPro.Data.Models.LegalEntity", "ProvidedBy")
                        .WithMany()
                        .HasForeignKey("ProvidedById");

                    b.HasOne("SongtrackerPro.Data.Models.Contract", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateId");

                    b.Navigation("ProvidedBy");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("SongtrackerPro.Data.Models.PublisherContract", b =>
                {
                    b.HasOne("SongtrackerPro.Data.Models.Composition", "Composition")
                        .WithMany()
                        .HasForeignKey("CompositionId");

                    b.HasOne("SongtrackerPro.Data.Models.Publication", "Publication")
                        .WithMany()
                        .HasForeignKey("PublicationId");

                    b.Navigation("Composition");

                    b.Navigation("Publication");
                });

            modelBuilder.Entity("SongtrackerPro.Data.Models.RecordLabelContract", b =>
                {
                    b.HasOne("SongtrackerPro.Data.Models.Recording", "Recording")
                        .WithMany()
                        .HasForeignKey("RecordingId");

                    b.HasOne("SongtrackerPro.Data.Models.Release", "Release")
                        .WithMany()
                        .HasForeignKey("ReleaseId");

                    b.Navigation("Recording");

                    b.Navigation("Release");
                });

            modelBuilder.Entity("SongtrackerPro.Data.Models.LegalEntity", b =>
                {
                    b.Navigation("LegalEntityServices");
                });

            modelBuilder.Entity("SongtrackerPro.Data.Models.Platform", b =>
                {
                    b.Navigation("PlatformServices");
                });

            modelBuilder.Entity("SongtrackerPro.Data.Models.RecordingCredit", b =>
                {
                    b.Navigation("RecordingCreditRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
